{"ast":null,"code":"import moment from 'moment';\nconst currentDate = moment();\nlet date = currentDate.date();\nlet classes = [{\n  title: 'Website Re-Design Plan',\n  startDate: new Date(2018, 5, 25, 9, 35),\n  endDate: new Date(2018, 5, 25, 11, 30),\n  id: 0,\n  location: 'Room 1'\n}, {\n  title: 'Book Flights to San Fran for Sales Trip',\n  startDate: new Date(2018, 5, 25, 12, 11),\n  endDate: new Date(2018, 5, 25, 13, 0),\n  id: 1,\n  location: 'Room 1'\n}, {\n  title: 'Install New Router in Dev Room',\n  startDate: new Date(2018, 5, 25, 14, 30),\n  endDate: new Date(2018, 5, 25, 15, 35),\n  id: 2,\n  location: 'Room 2'\n}, {\n  title: 'Approve Personal Computer Upgrade Plan',\n  startDate: new Date(2018, 5, 26, 10, 0),\n  endDate: new Date(2018, 5, 26, 11, 0),\n  id: 3,\n  location: 'Room 2'\n}, {\n  title: 'Final Budget Review',\n  startDate: new Date(2018, 5, 26, 12, 0),\n  endDate: new Date(2018, 5, 26, 13, 35),\n  id: 4,\n  location: 'Room 2'\n}];\n\nconst makeTodayClass = (startDate, endDate) => {\n  const days = moment(startDate).diff(endDate, 'days');\n  const nextStartDate = moment(startDate).year(currentDate.year()).month(currentDate.month()).date(date);\n  const nextEndDate = moment(endDate).year(currentDate.year()).month(currentDate.month()).date(date + days);\n  return {\n    startDate: nextStartDate.toDate(),\n    endDate: nextEndDate.toDate()\n  };\n};\n\nexport default _c2 = classes.map(_c = ({\n  startDate,\n  endDate,\n  ...restArgs\n}) => {\n  const result = { ...makeTodayClass(startDate, endDate),\n    ...restArgs\n  };\n  date += 1;\n  if (date > 31) date = 1;\n  return result;\n});\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$classes.map\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/jamie/Documents/Projects/COVID-Booking/COVID-Booking/src/components/rec-center-classes.js"],"names":["moment","currentDate","date","classes","title","startDate","Date","endDate","id","location","makeTodayClass","days","diff","nextStartDate","year","month","nextEndDate","toDate","map","restArgs","result"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\n\r\nconst currentDate = moment();\r\nlet date = currentDate.date();\r\n\r\nlet classes = [ {\r\n    title: 'Website Re-Design Plan',\r\n    startDate: new Date(2018, 5, 25, 9, 35),\r\n    endDate: new Date(2018, 5, 25, 11, 30),\r\n    id: 0,\r\n    location: 'Room 1',\r\n}, {\r\n    title: 'Book Flights to San Fran for Sales Trip',\r\n    startDate: new Date(2018, 5, 25, 12, 11),\r\n    endDate: new Date(2018, 5, 25, 13, 0),\r\n    id: 1,\r\n    location: 'Room 1',\r\n}, {\r\n    title: 'Install New Router in Dev Room',\r\n    startDate: new Date(2018, 5, 25, 14, 30),\r\n    endDate: new Date(2018, 5, 25, 15, 35),\r\n    id: 2,\r\n    location: 'Room 2',\r\n}, {\r\n    title: 'Approve Personal Computer Upgrade Plan',\r\n    startDate: new Date(2018, 5, 26, 10, 0),\r\n    endDate: new Date(2018, 5, 26, 11, 0),\r\n    id: 3,\r\n    location: 'Room 2',\r\n}, {\r\n    title: 'Final Budget Review',\r\n    startDate: new Date(2018, 5, 26, 12, 0),\r\n    endDate: new Date(2018, 5, 26, 13, 35),\r\n    id: 4,\r\n    location: 'Room 2',\r\n}]\r\n\r\nconst makeTodayClass = (startDate, endDate) => {\r\n    const days = moment(startDate).diff(endDate, 'days');\r\n    const nextStartDate = moment(startDate)\r\n        .year(currentDate.year())\r\n        .month(currentDate.month())\r\n        .date(date);\r\n    const nextEndDate = moment(endDate)\r\n        .year(currentDate.year())\r\n        .month(currentDate.month())\r\n        .date(date + days);\r\n\r\n    return {\r\n        startDate: nextStartDate.toDate(),\r\n        endDate: nextEndDate.toDate(),\r\n    };\r\n};\r\n\r\nexport default classes.map(({ startDate, endDate, ...restArgs }) => {\r\n    const result = {\r\n        ...makeTodayClass(startDate, endDate),\r\n        ...restArgs,\r\n    };\r\n    date += 1;\r\n    if (date > 31) date = 1;\r\n    return result;\r\n});\r\n"]},"metadata":{},"sourceType":"module"}